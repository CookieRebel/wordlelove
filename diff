diff --git a/public/index.html b/public/index.html
index cdf769a..0f46b20 100644
--- a/public/index.html
+++ b/public/index.html
@@ -24,7 +24,6 @@
       work correctly both with client-side routing and a non-root public URL.
       Learn how to configure a non-root public URL by running `npm run build`.
     -->
-    <!-- Hotjar Tracking Code for Wordle -->
     <!-- Google tag (gtag.js) -->
     <script async src="https://www.googletagmanager.com/gtag/js?id=G-720BN8YWPR"></script>
     <script>
@@ -34,16 +33,6 @@
 
       gtag('config', 'G-RR8N7DPH9C');
     </script>
-    <script>
-      (function(h,o,t,j,a,r){
-        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
-        h._hjSettings={hjid:3738456,hjsv:6};
-        a=o.getElementsByTagName('head')[0];
-        r=o.createElement('script');r.async=1;
-        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
-        a.appendChild(r);
-      })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
-    </script>
     <title>Wordle Love</title>
   </head>
   <body>
diff --git a/src/App.css b/src/App.css
index 2583bd1..bd0c960 100644
--- a/src/App.css
+++ b/src/App.css
@@ -45,7 +45,6 @@
   background-color: #6aaa64;
   border-color: #6aaa64;
   color: white;
-  animation: dance 0.6s ease-in-out;
 }
 
 .wordle-tile.present {
@@ -143,57 +142,12 @@
   background-color: white;
 }
 
-.invalid-word-message {
+.invalid-word-message,
+.correct-word {
   color: white;
   background-color: black;
   padding: 5px;
-}
-
-@keyframes dance {
-  0% {
-    transform: translateY(0);
-  }
-  10% {
-    transform: translateY(-10px);
-  }
-  20% {
-    transform: translateY(-20px);
-  }
-  30% {
-    transform: translateY(-10px);
-  }
-  40% {
-    transform: translateY(0);
-  }
-  50% {
-    transform: translateY(-10px);
-  }
-  60% {
-    transform: translateY(-20px);
-  }
-  70% {
-    transform: translateY(-10px);
-  }
-  80%,
-  100% {
-    transform: translateY(0);
-  }
-}
-
-.wordle-tile.correct.dance-1 {
-  animation-delay: 0.1s;
-}
-.wordle-tile.correct.dance-2 {
-  animation-delay: 0.2s;
-}
-.wordle-tile.correct.dance-3 {
-  animation-delay: 0.3s;
-}
-.wordle-tile.correct.dance-4 {
-  animation-delay: 0.4s;
-}
-.wordle-tile.correct.dance-5 {
-  animation-delay: 0.5s;
+  border-radius: 5px;
 }
 
 @keyframes shake {
@@ -239,3 +193,20 @@
     justify-content: center; /* Center the keys to maintain layout */
   }
 }
+
+@keyframes flipTileVertical {
+  0% {
+    transform: rotateX(0deg);
+  }
+  50% {
+    transform: rotateX(90deg);
+    /* Here we need to change the background color at 50% */
+  }
+  100% {
+    transform: rotateX(0deg);
+  }
+}
+
+.wordle-tile.flip {
+  animation: flipTileVertical 1.2s ease forwards;
+}
diff --git a/src/App.tsx b/src/App.tsx
index 5188d63..becf9ff 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -11,7 +11,6 @@ const App: React.FC = () => {
   const {
     boardState,
     lettersState,
-    isCelebrating,
     shakeTiles,
     gameWon,
     gameLost,
@@ -22,7 +21,6 @@ const App: React.FC = () => {
     handleKeyPress,
   } = useWordle();
 
-  console.log(correctWord);
   // Render the game board and   keyboard
   return (
     <div className="wordle">
@@ -39,7 +37,6 @@ const App: React.FC = () => {
         )}
         <GameBoard
           boardState={boardState}
-          isCelebrating={isCelebrating}
           shakeTiles={shakeTiles}
           currentTry={currentTry}
         />
diff --git a/src/GameBoard.tsx b/src/GameBoard.tsx
index 8146ae2..c8a8cb2 100644
--- a/src/GameBoard.tsx
+++ b/src/GameBoard.tsx
@@ -1,25 +1,24 @@
 import React, { FC } from "react";
-import TileComponent from "./TileComponent";
+import Tile from "./Tile";
 import { BoardStateType } from "./types";
 
 interface IGameBoardProps {
   boardState: BoardStateType;
-  isCelebrating: boolean;
   shakeTiles: boolean;
   currentTry: number;
 }
 
 const GameBoard: FC<IGameBoardProps> = (props: IGameBoardProps) => {
-  const { boardState, isCelebrating, shakeTiles, currentTry } = props;
+  const { boardState, shakeTiles, currentTry } = props;
 
   return (
     <div className="wordle-board">
       {boardState.map((row, rowIndex) => (
-        <div key={rowIndex} className="wordle-row">
+        <div key={"row-" + rowIndex} className="wordle-row">
           {row.map((tile, tileIndex) => (
-            <TileComponent
+            <Tile
+              key={"tile-" + tileIndex}
               tile={tile}
-              isCelebrating={isCelebrating}
               tileIndex={tileIndex}
               isShaking={shakeTiles && rowIndex === currentTry}
             />
diff --git a/src/LostMessage.tsx b/src/LostMessage.tsx
index 53a27cc..e8c6582 100644
--- a/src/LostMessage.tsx
+++ b/src/LostMessage.tsx
@@ -3,7 +3,7 @@ import { IMessage } from "./types";
 
 const LostMessage: React.FC<IMessage> = ({ onReset, correctWord }) => (
   <div className="game-lost-message">
-    Sorry, you're out of tries! The word was {correctWord.toUpperCase()}.
+    <div className={"correct-word"}>{correctWord.toUpperCase()}</div>
     <button className={"play-again-button"} onClick={onReset}>
       Play Again
     </button>
diff --git a/src/Tile.tsx b/src/Tile.tsx
index ced336a..8578b44 100644
--- a/src/Tile.tsx
+++ b/src/Tile.tsx
@@ -1,19 +1,39 @@
-import React from "react";
+import React, { useEffect, useState } from "react";
 import { ITileProps } from "./types";
 
-const Tile: React.FC<ITileProps> = ({
-  tile,
-  isCelebrating,
-  tileIndex,
-  isShaking,
-}) => (
-  <div
-    className={`wordle-tile ${tile.status} ${
-      isCelebrating ? `dance-${tileIndex + 1}` : ""
-    } ${isShaking ? "shake" : ""}`}
-  >
-    {tile.letter}
-  </div>
-);
+const Tile: React.FC<ITileProps> = ({ tile, tileIndex, isShaking }) => {
+  const [prevStatus, setPrevStatus] = useState(tile.status);
+  const [shouldFlip, setShouldFlip] = useState(false);
+  const [defaultState, setDefaultState] = useState(true);
+
+  useEffect(() => {
+    if (tile.status !== prevStatus && tile.status !== "default") {
+      setShouldFlip(true);
+      setTimeout(() => {
+        setDefaultState(false);
+      }, 600);
+      setTimeout(() => {
+        setShouldFlip(false);
+      }, 1200);
+    }
+    if (tile.status === "default") {
+      setDefaultState(true);
+    }
+    setPrevStatus(tile.status);
+  }, [tile.status]);
+
+  const flipDelay = 0.1 * tileIndex; // delay between each tile flip
+
+  return (
+    <div
+      className={`wordle-tile ${defaultState ? "default" : tile.status} ${
+        isShaking ? "shake" : ""
+      } ${shouldFlip ? "flip" : ""} `}
+      style={shouldFlip ? { animationDelay: `${flipDelay}s` } : {}}
+    >
+      {tile.letter}
+    </div>
+  );
+};
 
 export default Tile;
diff --git a/src/WinMessage.tsx b/src/WinMessage.tsx
index 40aad86..3a7ff5f 100644
--- a/src/WinMessage.tsx
+++ b/src/WinMessage.tsx
@@ -3,7 +3,9 @@ import { IMessage } from "./types";
 
 const WinMessage: React.FC<IMessage> = ({ onReset, correctWord }) => (
   <div className="win-message">
-    Congratulations! You've guessed the word {correctWord.toUpperCase()}!
+    <div>
+      Congratulations! You've guessed the word {correctWord.toUpperCase()}!
+    </div>
     <button className={"play-again-button"} onClick={onReset}>
       Play Again
     </button>
diff --git a/src/types.ts b/src/types.ts
index 16be1e3..6c8b96d 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -1,6 +1,5 @@
 export interface ITileProps {
   tile: ITile;
-  isCelebrating: boolean;
   tileIndex: number;
   isShaking: boolean;
 }
diff --git a/src/useWordle.ts b/src/useWordle.ts
index 152709e..930cbc3 100644
--- a/src/useWordle.ts
+++ b/src/useWordle.ts
@@ -29,7 +29,6 @@ const useWordle = () => {
   const [gameWon, setGameWon] = useState(false);
   const [invalidWord, setInvalidWord] = useState(false);
   const [gameLost, setGameLost] = useState(false);
-  const [isCelebrating, setIsCelebrating] = useState(false);
   const [shakeTiles, setShakeTiles] = useState(false);
 
   // Function to get a random word from the Words list
@@ -40,7 +39,7 @@ const useWordle = () => {
 
   useEffect(() => {
     const randomWord = getRandomWord();
-    console.log("Random word", randomWord);
+    console.log("Correct word", randomWord);
     setCorrectWord(randomWord);
   }, [getRandomWord]);
 
@@ -98,9 +97,6 @@ const useWordle = () => {
     // Check if the current guess is the correct word
     const isWinningGuess =
       currentGuess.toUpperCase() === correctWord.toUpperCase();
-    if (isWinningGuess) {
-      setGameWon(true);
-    }
 
     // Update the board state with the new guess
     const newBoardState = [...boardState];
@@ -110,14 +106,15 @@ const useWordle = () => {
     if (isWinningGuess) {
       // If the guess wins the game, trigger any win animations or actions here
       // For example, set a state to trigger the "dance" animation
-      setIsCelebrating(true);
       return; // End function execution after winning
     }
 
     // Update current try, and check for game over condition
     setCurrentTry(currentTry + 1);
     if (currentTry === MAX_TRIES - 1) {
-      setGameLost(true);
+      setTimeout(() => {
+        setGameLost(true);
+      }, 2000); // Wait for the tiles to turn around plus 800ms
     }
 
     // Reset current guess
@@ -145,7 +142,9 @@ const useWordle = () => {
     console.log("handleGuessSubmit");
     if (currentGuess.toUpperCase() === correctWord.toUpperCase()) {
       // The guess is correct, proceed with winning logic
-      setGameWon(true);
+      setTimeout(() => {
+        setGameWon(true);
+      }, 2000); // Wait for the tiles to turn around, plus 800 ms
       submitGuess(); // Update board state with correct guess
     } else {
       // If the guess is not correct, check if the word is valid
@@ -173,7 +172,9 @@ const useWordle = () => {
         Array(WORD_LENGTH).fill({ letter: "", status: "default" })
       )
     );
-    setCorrectWord(getRandomWord());
+    const randomWord = getRandomWord();
+    console.log("Correct word", randomWord);
+    setCorrectWord(randomWord);
     setCurrentGuess("");
     setCurrentTry(0);
     setGameWon(false);
@@ -208,17 +209,6 @@ const useWordle = () => {
     });
   }, [currentGuess, currentTry]);
 
-  useEffect(() => {
-    if (gameWon) {
-      setIsCelebrating(true);
-      const timeoutId = setTimeout(() => {
-        setIsCelebrating(false);
-      }, 1200 + (WORD_LENGTH - 1) * 100);
-
-      return () => clearTimeout(timeoutId); // Cleanup the timeout if the component unmounts
-    }
-  }, [gameWon]); // Only re-run this effect if gameWon changes
-
   useEffect(() => {
     let timeoutId: NodeJS.Timeout;
 
@@ -234,6 +224,31 @@ const useWordle = () => {
     };
   }, [invalidWord]);
 
+  // Effect to handle key presses
+  useEffect(() => {
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === "Enter") {
+        // handle enter
+        handleGuessSubmit();
+      } else if (event.key === "Backspace") {
+        // handle backspace
+        setCurrentGuess(currentGuess.slice(0, -1));
+      } else if (
+        /^[A-Za-z]$/.test(event.key) &&
+        currentGuess.length < WORD_LENGTH
+      ) {
+        // handle letter input
+        setCurrentGuess(currentGuess + event.key.toUpperCase());
+      }
+    };
+
+    document.addEventListener("keydown", handleKeyDown);
+
+    return () => {
+      document.removeEventListener("keydown", handleKeyDown);
+    };
+  }, [currentGuess, handleGuessSubmit]);
+
   return {
     boardState,
     correctWord,
@@ -242,7 +257,6 @@ const useWordle = () => {
     gameWon,
     invalidWord,
     gameLost,
-    isCelebrating,
     shakeTiles,
     handleKeyPress,
     handleGuessSubmit,
